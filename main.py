import copy
import datetime
import json
import os
import argparse
from pprint import pprint as pp
import random
import time
import uuid

from torch import rand
from mods import brains
from mods.brains.mlp_brain import MLPBrain
from mods.environments.basic_grid.basic_agent import AgentAttributes, BasicAgent
from mods.environments.basic_grid.basic_grid import BasicGrid
from PIL import Image
from mods.brains import Brain, RandomBrain


brains = []
attributes = []

evaluations = []

def add_brain(brain: Brain):
    brains.append(brain)

def add_agent(attribute: AgentAttributes):
    attributes.append(attribute)

def evaluate(brains: 'list[Brain]', attributes: 'list[AgentAttributes]', agents_per_brain_num: int, max_iterations: int, render_mode, grid_image_path, seed: int):
    assert grid_image_path is not None
    grid_image = Image.open(grid_image_path)
    env = BasicGrid(agents_num=agents_per_brain_num*len(brains), render_mode=render_mode,
                    grid_image=grid_image, max_iterations=max_iterations)
    env.reset(seed=42)

    used_brains = []

    idx = 0
    for a in env.agents:
        a.attributes = attributes[idx % len(attributes)]
        new_brain = brains[idx % len(brains)].clone()
        new_brain.id = a.id
        used_brains.append(new_brain)
        idx += 1

    observations, infos = env.reset(seed=seed)
    # print(observations, infos)
    swarm_reward = 0

    while env.agents:
        actions = {b.id: b.act(observations[b.id], env) for b in used_brains}

        observations, rewards, terminations, truncations, infos = env.step(
            actions)
        swarm_reward += sum(rewards.values())

        env.render()
    
    env.close()

    evaluations.append({
        "brains": brains,
        "attributes": attributes,
        "swarm_reward": swarm_reward
    })

def main_old():
    evaluate(brains, attributes, agents_per_brain_num=10, max_iterations=100, render_mode='None', grid_image_path="./data/environments/0.png", seed=21)

def evaluate_brains_agents(brains: 'list[Brain]', agents: 'list[AgentAttributes]', agents_per_brain_num: int, max_iterations: int, render_mode, grid_image_path, seed: int):
    brain_instances = []
    
    grid_image = Image.open(grid_image_path)
    env = BasicGrid(agents_num=agents_per_brain_num*len(brains), render_mode=render_mode, grid_image=grid_image, max_iterations=max_iterations)
    env.reset(seed=seed)
    idx = 0
    for a in env.agents:
        # a.attributes = attributes[idx % len(attributes)]
        new_brain = brains[idx % len(brains)].clone()
        new_brain.id = a.id
        brain_instances.append(new_brain)
        a.attributes = agents[idx % len(agents)]
        idx += 1

    observations, infos = env.reset(seed=seed)
    fitness = 0

    while env.agents:
        actions = {b.id: b.act(observations[b.id], env) for b in brain_instances}

        observations, rewards, terminations, truncations, infos = env.step(actions)
        fitness += sum(rewards.values())

        env.render()
    env.close()
    return fitness

def mutate_brain_agent_pair(brain_agent_tuple_a, random_brain_agent_tuple_b, mutation_chance=0.1):
    brain_a, agent_a = brain_agent_tuple_a
    brain_b, agent_b = random_brain_agent_tuple_b

    random_brain_cross_over_point = random.randint(0, len(brain_a)-1)
    random_agent_cross_over_point = random.randint(0, len(agent_a)-1)

    new_brain_a = brain_a[:random_brain_cross_over_point] + brain_b[random_brain_cross_over_point:]
    new_agent_a = agent_a[:random_agent_cross_over_point] + agent_b[random_agent_cross_over_point:]

    new_brain_a = [type(brain_a).deserialize(brain_a.serialize()) for brain_a in new_brain_a]
    new_agent_a = [copy.copy(agent_a) for agent_a in new_agent_a]

    if random.random() < mutation_chance:
        for brain in new_brain_a:
            brain.mutate(None)
    if random.random() < mutation_chance:
        for agent_attributes in new_agent_a:
            BasicAgent.mutate(agent_attributes)
    return (new_brain_a, new_agent_a)

def get_time_from_seconds(s):
    return str(datetime.timedelta(seconds=s))
    
def write_json(json_data, path):
    data_file = open(path, 'w')
    data_file.write(json.dumps(json_data, indent=2))
    data_file.close()

def run_simulation(grid_image_path:str, brain_type, brain_setup, hierarchy_levels, agents_per_brain_num, population_size, iterations, crossover_chance, mutation_chance, max_iterations, render_mode, seed):
    simulation_data = {
        "id": str(uuid.uuid4()),
        "start_time": int(time.time()),
        "end_time": int(time.time()),

        "research": {
            "grid_image_path": grid_image_path,
            "brain_type": str(brain_type),
            "brain_setup": brain_setup,
            "hierarchy_levels": hierarchy_levels,
            "agents_per_brain_num": agents_per_brain_num, 
        },

        "evolution": {
            "iterations": iterations,
            "population_size": population_size,
            "crossover_chance": crossover_chance,
            "mutation_chance": mutation_chance,
        },

        "evaluation": {
            "max_iterations": max_iterations,
            "render_mode": render_mode,
            "seed": seed
        }
    }

    os.makedirs('./data/simulations/' + simulation_data["id"], exist_ok=True)
    os.makedirs('./data/simulations/' + simulation_data["id"] +'/generations', exist_ok=True)
    write_json(simulation_data, './data/simulations/' + simulation_data["id"] + '/simulation_data.json')

    print(f"brain_type {simulation_data['research']['brain_type']}\n\
hierarchy_levels {simulation_data['research']['hierarchy_levels']}\n\
agents_per_brain_num {simulation_data['research']['agents_per_brain_num']}\n\
population_size {simulation_data['evolution']['population_size']}\n\
iterations {simulation_data['evolution']['iterations']}\n\
crossover_chance {simulation_data['evolution']['crossover_chance']}\n\
mutation_chance {simulation_data['evolution']['mutation_chance']}\n\
max_iterations {simulation_data['evaluation']['max_iterations']}\n\
grid_image_path {simulation_data['research']['grid_image_path']}\n\
seed {simulation_data['evaluation']['seed']}")

    # log initial state
    population = []
    population_size = simulation_data["evolution"]["population_size"]
    hierarchy_levels = simulation_data["research"]["hierarchy_levels"]
    evolution_iterations = simulation_data["evolution"]["iterations"]
    start_time = simulation_data["start_time"]
    
    # create initial population
    for _ in range(population_size):    
        brain_types = []
        agent_attributes = []
        for _ in range(hierarchy_levels):
            if brain_type == "random":
                brain_types.append(RandomBrain()) 
            elif brain_type == "mlp":
                brain_types.append(MLPBrain(simulation_data["research"]["brain_setup"])) 
            
            agent_attributes.append(BasicAgent.generate_random_attributes())
        population.append((brain_types, agent_attributes))
    
    # run evolution
    for evolution_iteration in range(1, evolution_iterations+1):
        population_with_fitness = []
        for brain_types, agent_attributes in population:
            fitness = evaluate_brains_agents(brain_types, agent_attributes, 
                                             agents_per_brain_num=simulation_data["research"]["agents_per_brain_num"],
                                             max_iterations=simulation_data["evaluation"]["max_iterations"],
                                             render_mode=simulation_data["evaluation"]["render_mode"],
                                             grid_image_path=simulation_data["research"]["grid_image_path"],
                                             seed=simulation_data["evaluation"]["seed"])
            if fitness == 0:
                fitness = 1
            population_with_fitness.append((brain_types, agent_attributes, fitness))
            # print(brain_types, agent_attributes, fitness)


        iteration_data = {
            "generation": evolution_iteration,
            "population_with_fitness": [([brain.serialize() for brain in brain_types], [aa.serialize() for aa in agent_attributes], fitness) for (brain_types, agent_attributes, fitness) in population_with_fitness]
        }
        write_json(iteration_data, './data/simulations/' + simulation_data["id"] + '/generations/' + str(evolution_iteration) + '.json')        
        # pick agents to survive
        total_fitness = sum([x[2] for x in population_with_fitness])
        average_fitness = total_fitness / len(population_with_fitness)
        best_fitness = max([x[2] for x in population_with_fitness])

        # uneven roulette wheel selection
        population_with_copy_value = [(brain_types, agent_attributes, population_size * fitness/total_fitness) for (brain_types, agent_attributes, fitness) in population_with_fitness]
        population_with_copy_value.sort(key=lambda x: x[2], reverse=True)
        # minimal_fiteness = population_with_copy_value[-1][2]
        # population_with_copy_value = [(brain_types, agent_attributes, fitness-minimal_fiteness) for (brain_types, agent_attributes, fitness) in population_with_copy_value]

        new_population_parents = []
        for i in range(population_size):
            num = random.random() * population_size
            for j in range(len(population_with_copy_value)):
                if num < population_with_copy_value[j][2]:
                    brain, agent, copy_count = population_with_copy_value[j]
                    new_population_parents.append((brain, agent))
                    break
                num -= population_with_copy_value[j][2]

        new_population = []
        for brain_types, agent_attributes in new_population_parents:
            if random.random() < simulation_data["evolution"]["crossover_chance"]: 
                random_brain_agent = new_population_parents[random.randint(0, len(new_population_parents)-1)]
                new_population.append(mutate_brain_agent_pair((brain_types, agent_attributes), random_brain_agent, mutation_chance=simulation_data["evolution"]["mutation_chance"]))
            else:
                new_population.append((brain_types, agent_attributes))
        
        population = new_population
        # check stop conditions
        # for brain_types, agent_attributes, fitness in population_with_fitness:
        #     print(f"fitness {fitness}")
        generation_end_time = int(time.time())
        eta_s = (generation_end_time - start_time) * (evolution_iterations - evolution_iteration) / (evolution_iteration)
        avg_s = (generation_end_time - start_time) / (evolution_iteration)
        print(f"elapsed {get_time_from_seconds(int(time.time()-start_time))} avg {int(avg_s)}s eta {get_time_from_seconds(int(eta_s))} generation {evolution_iteration}/{simulation_data['evolution']['iterations']} avg/max {round(average_fitness)}/{round(best_fitness)} pop_size {len(population)}")

    # log final state

def collect_data():
    parser = argparse.ArgumentParser()
    parser.add_argument('--brain', type=str, default='random', help='Brain type')
    parser.add_argument('--hl', type=str, default='1', help='hierarchy_levels')

    args = parser.parse_args()

    brain_type = args.brain
    brain_setups = [None]
    if brain_type == "mlp":
        brain_setups = []
        brain_setups.append([9+15,5,10])
        brain_setups.append([9+15,10,10])
        brain_setups.append([9+15,20,10])
        brain_setups.append([9+15,7, 3,10])
    for brain_setup in brain_setups:
        for grid_image_path in ["./data/environments/1.png", "./data/environments/2.png", "./data/environments/0.png"]:
            total_agent_count = 20
            hierarchy_levels = int(args.hl)
            for evolution_params in [(0.4,0.4), (0.4,0.7),(0.5,0.1)]:
                crossover_chance, mutation_chance = evolution_params
                for _ in range(3):
                    run_simulation(
                        grid_image_path=grid_image_path,
                        brain_type=brain_type,
                        brain_setup=brain_setup,
                        hierarchy_levels=hierarchy_levels,
                        agents_per_brain_num=total_agent_count//hierarchy_levels,
                        population_size=30,
                        iterations=200,
                        crossover_chance=crossover_chance,
                        mutation_chance=mutation_chance,
                        max_iterations=200,
                        render_mode=None,
                        seed=random.randint(0, 1000000))

def main():
    best_grid_0 = [[{'id': None, 'layers': [24, 10, 10], 'weights': [[[-0.07758017544906068, 0.08838700995829174, -0.1373458854714867, -0.03711943295901069, -0.030920969573882708, -0.04456210917229522, 0.0022755819088478156, 0.21134835304048957, 0.08290017659428417, 0.1923401579332058, -0.13987114197982622, -0.06396085926625987, -0.1240247808652353, -0.12754794845331763, 0.027571022493193986, -0.08342560808153904, -0.0738069753321042, -0.10731186081248384, -0.14362259476208075, 0.0170954921978494, 0.00792896397311352, 0.09859867478968905, -0.04388348935013214, 0.13239650666401034], [0.08829013311497627, 0.17393919297967247, -0.060740899302201924, -0.01945852604331838, -0.028215525658119956, -0.02914237392319137, -0.059734768385646175, -0.03440575320767229, -0.0007206033165739144, 0.014872872995608816, -0.04267472247137649, -0.02799346272378549, -0.17289073199947844, -0.10305540702447676, -0.09349360721595618, -0.2065053393116044, 0.08690642368515351, 0.09880019198162202, 0.13130371185574066, 0.06955152463142521, -0.15458681676170205, 0.01955302004987986, -0.05671246820527825, 0.07344615924092156], [-0.0985881376238102, -0.09657036563278293, -0.05878259372697097, -0.07082402119841218, 0.0014763782100881675, -0.06279059694042392, -0.02363137513203851, 0.03958099448889891, 0.04057284595210303, -0.0461005841145147, 0.041091045762925556, 0.02501116074701026, 0.06607731225180354, 0.08591421143120824, -0.12346054601660945, -0.03572625116173427, -0.01519425278489988, -0.08569561673133855, 0.005378498128298714, 0.18805558938281983, -0.11369107034525922, -0.0022100129852038334, 0.039650814139894665, -0.10260604103815132], [-0.020133114814352406, 0.06452159073805146, 0.08376254331966103, 0.2527937262364131, 0.053679295110510866, 0.0011853672290404191, 0.06965402081135041, 0.014311881553192428, -0.06774963395668768, 0.09472599078143826, 0.028266311366873638, -0.04980503117300456, -0.034695434829641436, -0.06834994769447936, 0.0978608127862979, 0.02461165660822713, -0.10357780909953136, -0.0658544501569852, 0.07523331572711009, 0.06267969303370026, -0.0111159231149063, -0.04938822125014853, -0.08511322521303565, 0.05608412804713643], [-0.07228137261015798, 0.011888896185012095, 0.04716246204142503, -0.0709436611911781, 0.006486171228551442, -0.0430970715158972, -0.1373797505218651, -0.18510506355111472, 0.14851025947590163, -0.12618901409495314, -0.009886902951525145, 0.1645044534503408, 0.1279227078519779, 0.030504506674173648, 0.09015160706792415, -0.2108720803006135, -0.1538317434806656, 0.14643179908049903, -0.061053576800417335, -0.11838538482590427, -0.101260087647923, -0.012967742173679823, 0.2636467260878264, 0.08126114689373565], [0.03348227007875603, 0.0419908560653791, 0.19743611572592343, 0.11632173789798156, 0.0131653701013104, -0.025621940680663438, -0.09359424644753749, 0.013678040304344042, -0.13703478047915824, -0.17839914928736217, -0.07502182793250864, 0.04315417532868358, 0.03673241246655292, -0.019061347400799213, 0.003329392344804943, -0.14516568874104843, -0.26511099177598413, 0.08203827216793301, 0.08817682215644954, -0.11387648273254494, 0.03385955144224228, -0.10960306557369855, 0.05661848624515467, -0.005318360385774071], [0.1571893981649102, 0.03158183380194104, 0.17339971319660114, 0.04016066843661727, 0.16587616716386397, 0.049291288252556534, 0.07140315329471093, 0.11500123982546165, 0.07261392897508394, 0.12665940526927708, 0.0376511228096089, -0.1335809520732808, 0.014521644539866775, -0.02041472317512731, 0.020539778702694182, 0.060899580847157735, 0.048504360776330496, 0.0200105506744069, 0.06515343160598408, 0.1561502035020218, -0.07529177381497647, -0.04787024107022495, -0.22105181690522652, -0.08280059773036669], [0.16728048333989776, 0.12244585996016305, 0.07168456545619416, 0.10598603322760375, -0.05462641888810646, 0.08606660851631551, 0.018207084983559944, -0.010413827828497936, -0.04096341783889241, -0.07356569619908124, 0.022838127438949078, 0.09286020258623998, -0.11330092622371579, 0.2131197946224803, 0.0178202219439548, -0.008403640824732992, 1.1144308697360467e-05, 0.10316059901500887, 0.1167072883612085, -0.028576717325254256, -0.11158143028986618, 0.0343208253398283, -0.04636972274973083, -0.14454086279312617], [-0.024243053074882365, 0.019666441123733128, -0.10380345328182142, -0.17209312010591848, -0.34688484508085793, -0.10381565009167056, -0.05466533748899388, 0.0008926136915580854, -0.0467211673698731, -0.08770548562825102, 0.01306041923481875, -0.009317736732010258, 0.021552223961243344, 0.17952723081738373, 0.107902462328748, 0.012390427499662265, 0.17159519821463484, 0.088887176030788, 0.0566902685033929, -0.1507696187538363, -0.08708812374581369, 0.048449234395013654, 0.04763422450170549, -0.013356225827075517], [-0.02054396831611661, -0.25442103578655484, -0.08933424071923313, 0.03323613271818978, -0.024794806726434106, -0.017873441137009765, 0.04667446494995792, -0.031896733662473975, -0.0823963424521323, -0.07350701797426336, 0.09924265627609463, 0.009518343640756545, 0.13086421525190137, 0.09586905453406702, 0.23638953734756024, -0.009603263200159797, 0.07944637658190823, 0.139234632884577, 0.14791874428919624, -0.14243166365241197, -0.20707604335338387, -0.05707940695715039, 0.013017933536462148, 0.1589556738605818]], [[-0.008059611084589573, -0.052100439732021234, 0.04253355485671548, -0.0045321908644902625, 0.0845910032439948, -0.11460557609885205, 0.027929902786886153, -0.08991734422345107, 0.02870362143853344, 0.09432171060776975], [0.053170852729084485, 0.13268021006592373, 0.032277673713682634, -0.006543299752819092, -0.035159429715311906, 0.12916946320816464, -0.09963300933426314, -0.09947494777545292, 0.00947227493454519, -0.2687211260578056], [0.06544128857266916, -0.11047601607633523, 0.05508463723930771, -0.1866240563470812, -0.0893020814602975, -0.19010621060088306, -0.06114055299203019, -0.1357163336779263, 0.061114413039265396, 0.24345798414519265], [0.0443648626866367, -0.06591105003629362, 0.0011539621229704452, -0.11585575516481761, -0.07468585787208736, -0.07045191580508466, 0.0348614687824178, -0.05693272716138669, 0.19157360678636132, -0.10821028576054524], [-0.0014857601629506237, 0.03241806881080796, -0.14644831546562803, -0.0775058998852638, -0.13086491850826754, 0.05047767544146869, -0.0472140610340194, 0.1913753693786015, -0.0890401415459582, 0.030175503630433642], [-0.13905934953393084, -0.036287643259158404, 0.07039112041611145, 0.13494477565925392, -0.0007142353935633422, 0.20094932829486925, -0.05403983554619788, 0.10132672173821877, -0.19291948610732712, -0.10850860945244628], [0.07095702183927904, -0.04876837292334707, -0.12026022837690903, 0.010455677996685241, 0.09635174643793279, 0.12259367698993502, 0.04788228239663738, 0.019532588456887007, -0.0798152411565808, -0.11610841062581348], [0.06884010348604881, -0.059380829392244386, -0.09600946808838198, -0.11261555126308252, 0.027575231133773352, -0.09411812071583456, -0.19638538509318776, 0.08815260061611963, -0.11940397805807144, 0.04853981175298366], [0.04129098864346156, 0.037528399607165204, -0.13950469535275167, -0.221038143967058, -0.04160261150167929, -0.064915035673862, -0.05632254355797955, 0.06667543376350926, 0.1415661995819918, -0.04316083137066546], [0.05101778339743273, -0.04568407691229495, 0.07535943698810121, -0.1198921939507841, 0.15856307270395226, -0.026691363249972455, -0.05239225054355488, 0.0002918530969045023, 0.0864002276978293, -0.0769322471299122]]], 'biases': [[[-0.10543126082203537], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[-0.2425978784346256], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]]}, {'id': None, 'layers': [24, 10, 10], 'weights': [[[0.03587214347614773, 0.04264721083117094, 0.0374395568514541, -0.1228021519834388, -0.12789163077018462, -0.10229033083203792, -0.25257341435436426, -0.15430595032153563, -0.07013129350903373, -0.027902312551575794, 0.06252229804131203, 0.0761382660256156, -0.07060599609840389, 0.08976940251814405, -0.04098802179604649, -0.03876421997995397, -0.06051215931618285, 0.08855419575621018, 0.00019579036192718163, -0.029269954549375296, 0.008578630297920754, 0.05045156180172459, -0.06536209266945883, -0.19635080242069292], [-0.05479297574651101, -0.08857147950189015, -0.037341752770813495, 0.1527286699240978, -0.09055240562425809, -0.033064861053188364, -0.11057907217405205, 0.026082624215891744, -0.06829385873927601, -0.07525298378566771, 0.023380606796891922, -0.05965812018374675, 0.23006216142420152, -0.06008191337326905, -0.13294719589314283, -0.04787604313687801, 0.10618664342366263, -0.16654867308754603, 0.2173254553047714, -0.1298109626142908, -0.043623024116978916, -0.1997794213203966, -0.08297706635867479, 0.018678949491060675], [0.15566304799107814, -0.0018825272195064425, 0.25110434108246094, 0.15282497497572078, 0.12044055477875562, -0.05482708511819215, 0.06124543571268644, 0.05897640639273026, -0.020059980965158954, 0.09966228583974307, -0.09574960451897097, -0.008693842631155458, 0.05365914324449546, 0.07123552828173305, 0.0499304477775743, -0.07584475727266242, -0.07961916768799066, 0.017143188097400786, 0.25280217240404185, -0.06453849379446183, 0.02223767228487237, 0.05172112507190374, 0.08182476847897113, -0.11902209312225992], [0.08703569016392032, 0.026684862997655042, 0.10053502150307723, -0.04276020675898063, -0.03732013434734753, -0.08396609647608202, 0.10204700687260893, -0.1414105452644874, -0.07497503746465048, 0.015651871353275892, -0.02275181613419525, 0.08544729218442511, -0.0038400625497112036, -0.06756620978690198, 0.07969061634908833, -0.007474692185347066, -0.19961317899949302, 0.08519380779010237, 0.015295631830813528, -0.18122207106887325, -0.09081214542386778, -0.03105625777538966, -0.03729985120496696, -0.08735125252490233], [0.006322555057651168, -0.044630306343753534, 0.008076159354912543, -0.03661866697204658, -0.062162109179691886, 0.13826048817128486, -0.003093683317533415, 0.06777365115812302, 0.03628240407523019, -0.16017912458308248, 0.07721183878314292, -0.05968987207457698, 0.11453222139356004, 0.15399256419828394, -0.09625939572461531, 0.015114887701545976, 0.2194529566253597, 0.06853548953278947, 0.07379604761159904, -0.13663239546673753, -0.07825671455239527, 0.020499115673268023, 0.32728877834369546, 0.012250367486736094], [-0.08170131693349181, 0.037658197473433574, -0.0965724929584591, 0.021735344789848662, -0.22975768428288543, -0.04417488863793806, 0.07553044753592501, 0.04624656474668736, -0.11895700201756743, -0.023094282536967756, -0.17988737239287375, -0.08657566501140228, 0.08334850639344611, -0.047576652583917266, 0.15272817099913266, -0.298654954167725, -0.10821643388849572, 0.024503871698961108, -0.15968300751890796, -0.11504099612777484, 0.10241384613084902, -0.08951557211885101, 0.04163139577234793, 0.059952154032441064], [0.09303044761085039, -0.012580243547814405, 0.088493445751381, -0.07497285867360172, 0.0777149657508072, 0.0516740094233497, -0.07107023032833172, 0.14322364977312482, 0.03130621853777329, -0.002254235911375012, -0.016770928642109762, -0.11561628816354635, 0.18574202141770127, 0.08924799829613454, 0.2177351241407066, 0.011112450167182842, 0.04197836832415792, -0.08795064738288104, -0.005906314614573326, 0.09075187160536557, -0.14483071941060977, -0.0008478007564938702, -0.26600250125449915, 0.1874164208123502], [0.0456144264260252, -0.12768845443543206, 0.04853735232729965, -0.04109443754446285, 0.14748930596424453, -0.022843460863987676, -0.1802789837113436, -0.11825352752865129, -0.11263595331700496, 0.011637735310912924, -0.08377247341456351, -0.052893590101323586, 0.1749786918844502, 0.0017939402996116451, -0.11824756304816131, 0.11531468468112978, -0.019301840524485976, 0.03722150671984517, 0.05683107825520111, 0.0004335305061561093, 0.052338555497274675, -0.036114959682553814, -0.04140096684138412, 0.1275691487605801], [0.01605274908961719, 0.05091286525889277, 0.011331434095659327, 0.01396051617338748, 0.06568476054574567, -0.05523188639906449, 0.06308584429528759, 0.08675893546024732, 0.11884639668129321, -0.1394186234072305, 0.04085186215963737, -0.05239639634073411, -0.0029245399595563717, -0.0326624561306205, -0.04675189260147322, 0.24875462336445459, -0.021899919425395403, 0.1810775155952048, 0.08431811720041768, -0.02189637217209424, -0.0647207820039573, -0.12921456141352086, 0.014744857050862105, -0.11678682066655417], [0.13097250590935888, 0.024449239613616877, -0.16254000975714833, -0.04701377732355963, -0.003972993212018036, 0.15436726730875916, -0.07290242734427757, -0.060868768477337576, 0.071735724849028, 0.024448995337458125, -0.028853008215533122, -0.02332615222045072, 0.1174274212030664, 0.021370319997787955, 0.02801599618971555, -0.0464146131380504, -0.08145014991279519, -0.012872899625529921, 0.02801355173352273, -0.16835393898181764, 0.14608328594335435, 0.009582939557367155, 0.003248266566415567, 0.11725882234841799]], [[-0.08724945818759139, 0.030099593352858584, 0.09539153670106311, -0.08348958403277734, -0.029731718798229164, -0.1532938076510537, 0.11010837784223906, 0.24548132026199487, 0.038123601958860796, 0.1434829294764057], [-0.06096645178660013, 0.06659234778217446, -0.24799652522014198, -0.03951445015747576, -0.21998067458692888, -0.0676753179713443, -0.09167599932120275, -0.003284196320887833, 0.051084124504181, 0.014330610790731616], [-0.027037310203563203, 0.031233578225201886, 0.0963384336381532, -0.16269999077579286, 0.13709105729121143, 0.009563102770462507, -0.021974208891325276, -0.22389867087846171, -0.009806857758139942, 0.012508594618001974], [0.04806878331808825, -0.05043104646057536, 0.06766905235410772, -0.20063616243719254, -0.0651815115812399, 0.10937176070636981, -0.12947895079339508, 0.027116838396624977, -0.04367429233168818, 0.11174499822452272], [-0.10138717022054206, 0.03106084785546905, 0.028877777743205452, -0.18224603988850846, -0.13007851330644335, 0.20018524073542215, -0.10559566108211436, 0.12011434596939011, -0.0283598451156538, 0.053652902396611316], [0.09530661827540077, 0.10192150836339223, -0.04992826021722082, 0.14626046867219844, 0.01139848935857106, 0.09447531239614446, 0.12259754632064897, -0.0474999209602336, 0.03691995067616759, -0.006245393013136393], [0.010794073537354907, 0.129932271200709, -0.08199424070811831, -0.1485187237843686, 0.17003618366211565, -0.0235576513050946, 0.11603067347597557, 0.01721422782353908, 0.10741585569182338, 0.07856085870161196], [0.17378586460836118, -0.047027466138646834, -0.06180152530079778, -0.19032711976900263, 0.11306731699499468, -0.17370148145059272, 0.09348326052901187, 0.01943700020503114, 0.15083677834282566, -0.062094161356985644], [-0.0011065668133008874, -0.21516932517382203, -0.02560786202479259, -0.04697229848516057, -0.05588442296079595, 0.10980512931447275, -0.07048219427342822, 0.04840999595439832, 0.03058787934284045, 0.06002501740585208], [-0.12081151308691428, 0.1496660002060827, -0.10249733815563153, 0.03339258431869442, -0.16907751072938698, -0.015857562973568797, 0.12423344397130008, 0.036573358275959054, 0.0392411801968732, 0.15070358213842333]]], 'biases': [[[0.26121889232890105], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[-0.28063020613352946], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]]}], [{'energy': -0.003674278658993394, 'max_energy': 0.30528184931728575, 'movement_energy_cost': 0.0030528184931728577, 'signal_emit_range': 0.9348787894044421, 'signal_emit_cost': 0.0065441515258310955, 'signal_hear_range': 0, 'idle_energy_cost': 0.01}, {'energy': -0.0028388435286473036, 'max_energy': 0.8581005149777385, 'movement_energy_cost': 0.008581005149777386, 'signal_emit_range': 0.26280734781419746, 'signal_emit_cost': 0.0018396514346993823, 'signal_hear_range': 0, 'idle_energy_cost': 0.01}], 7773.0]
    best_grid_1 = [[{'id': None, 'layers': [24, 5, 10], 'weights': [[[0.050945282589366786, -0.11344459806960164, -0.20842983292709133, -0.03322898006694074, -0.014938580135257288, -0.17800041734721264, -0.11887004712649392, -0.010118304153504292, -0.08356077985572034, -0.07056096588687881, 0.09540685130080623, 0.130591152458188, 0.09990576664578828, -0.004772948864318791, 0.0045815692645640865, 0.04470660207471402, 0.007743011866617433, 0.017486355443465385, 0.009131111061964655, 0.11905342526042002, -0.10572374068218507, 0.04317914382521375, 0.24082535815518222, 0.08891475075893207], [-0.052197674901925506, -0.08841376765774621, 0.29190596771149563, 0.18870740901940616, -0.0625032208411712, -0.09154490871719881, -0.04410094434973913, 0.11178657770484511, 0.0415555026946223, 0.028325883843963763, 0.04570483801483066, -0.09773864415306664, 0.0018809426948734219, 0.07305918912062383, -0.012281007042845958, -0.11221641091087367, 0.10640110635637648, -0.14007144381442768, -0.05722213862405078, -0.0640468372858477, -0.14758523316906982, 0.08912261975593902, 0.2007810782245637, 0.006310250587696813], [-0.008147841722852142, -0.1629578762606838, -0.1780085368707288, 0.015894142883570217, 0.0361468248135873, 0.16312799944858333, 0.09349874979163858, -0.21759057567829904, 0.08107992655915863, -0.09704364070868066, -0.0033450726395096338, -0.08919363017153613, 0.023781526803896395, 0.2719903941637627, -0.05953467686405428, 0.02689278822697169, 0.13684320928130986, 0.0005639317294212401, 0.07932120813737371, -0.002937219625507484, -0.035249335483748076, 0.04585538290133411, 0.02880517440664301, -0.16450702503052755], [0.0010553190947055618, -0.20739727316383824, -0.0972262050319885, 0.17446552661111348, -0.014508921399940922, 0.016316936337424478, -0.08067988887798697, 0.061818868432082036, 0.098681846466926, -0.06963961075763753, -0.041847293907641595, -0.05125819833744122, -0.21950843399129247, -0.01139806477195747, -0.09941897951770037, -0.06815895913744884, 0.23505346264239588, -0.05545446440861891, 0.13828636407660275, 0.06825893716303061, -0.007307631230983859, 0.057706622087616045, -0.07253599862499913, 0.00723041666622484], [-0.06838067380184144, -0.09469577894158537, -0.08820583602180032, -0.041878676256724756, -0.09852909482226416, -0.014824208116419504, -0.030986660530282734, 0.23166040873378876, 0.08910734731031633, 0.027991853725442946, 0.21714019357799566, 0.039826954762804054, -0.031485411345231, 0.05405901182821389, 0.008688836529111937, 0.12605676167482982, 0.023843851426482737, -0.06637405077934007, 0.19616094502851084, -0.0032101106464399367, -0.10160913718614498, -0.05018362236545394, 0.09952258482261864, 0.1088475582126963]], [[0.12503585002300843, 0.06670183789872479, -0.03628344580870866, -0.0643242056559686, -0.042242973016066825], [-0.029993326586733673, 0.10112456177058526, 0.011113068673730242, -0.08547083824125128, 0.0237816521131837], [-0.11522853253382152, 0.07401699425122586, -0.051545368393431885, 0.04103158455227132, 0.035732194537963426], [0.07474517372113859, -0.0312732364975601, -0.21604157967615967, -0.07384749997229288, 0.1262002032597648], [-0.03189941949501088, -0.022119723862482663, 0.02187170464222295, 0.030349310651031792, 0.2790163378667159], [-0.06869347867621184, 0.014744355990717531, -0.11419016247195776, 0.18492562774789884, 0.26168300668524075], [-0.03289850490717067, 0.17039742334383273, 0.0626610019661541, -0.1935046882394222, -0.06984991219047425], [0.05010081001343787, 0.07309205754733215, 0.0728897971650373, 0.0007518032794858188, -0.05099047134164878], [0.06449447736389172, -0.07693287690262865, -0.10573719658946154, -0.022967222530518302, -0.20110415213479602], [0.3323283435873007, 0.04642229183465013, 0.11152847013295267, -0.06146430620426699, 0.030157787401393982]]], 'biases': [[[0.24145254082675446], [0.0], [0.0], [0.0], [0.0]], [[-0.3469047471153833], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]]}], [{'energy': -6.176353664181372e-06, 'max_energy': 0.8653665859301227, 'movement_energy_cost': 0.008653665859301227, 'signal_emit_range': 0.3818025746945416, 'signal_emit_cost': 0.0026726180228617913, 'signal_hear_range': 0, 'idle_energy_cost': 0.01}], 38983.99999999999]
    best_grid_2 = [[{'id': None, 'layers': [24, 7, 3, 10], 'weights': [[[0.18808472823080358, -0.03490851798787779, -0.036543945348723086, -0.020079674820440686, -0.04491380385126035, 0.08969408528363698, -0.09009129030169453, 0.07256773012364805, 0.2699906280399639, -0.10948885323042952, 0.027483895160249655, 0.09956896429918369, -0.1194202749708291, 0.03740585238353477, 0.19914595946698188, -0.040805426891268086, 0.2304529582180359, 0.08722270652040859, 0.023524581401058633, -0.015242533379633612, 0.0960500252868569, -0.033909700512328715, 0.03888297135507626, -0.12109652528099227], [0.004944494222245373, 0.07697011725279072, -0.08607238087060017, 0.011607440983732517, -0.017424146372950443, -0.011115150849566425, -0.022072165386343576, 0.007188125687224102, -0.1706041322468221, -0.02628437373445999, 0.0059359572627538555, -0.1774484577852869, -0.05313330501450258, -0.059572057448345206, -0.15619042654826454, -0.037553748081271994, -0.025911064806596912, 0.04594531417919308, 0.04002730043267231, -0.024575192578774607, 0.11393443338743192, -0.07791940274253971, -0.011473959466421046, -0.1614545698775964], [0.07368682831530446, -0.07129732806605375, -0.0648947384612663, 0.18697924039666042, 0.012009246128070047, -0.08369097586023971, 0.14242349329359846, -0.03247767114536577, 0.046196053431400874, 0.14801008495764664, 0.12364564945765517, 0.10500710815701703, 0.10038012035340085, 0.0750533020018671, 0.15647715514067193, 0.09143605203997744, 0.1111909376767542, 0.17945291482276765, -0.025594588578149932, -0.0542145700762664, -0.023762295091408207, 0.0016827696074461073, 0.1384464439484741, -0.14103337685460282], [-0.02235961074946773, 0.23257560024822035, -0.06334233516310528, -0.0130132441779909, -0.08254055735693991, -0.01952599054621178, -0.03183444955298276, -0.04811774373832193, 0.06202286211842192, 0.002608960227222734, -0.10029106804660677, 0.09174098306203501, -0.1615559837332318, -0.03325175215371109, -0.09335977395506517, -0.07111362842814827, -0.07626527016216422, -0.009774530165593875, 0.10787556084129882, 0.08417872458154049, 0.01004922104439996, 0.030919772269068, -0.13498877755106412, -0.05231616814470983], [-0.03671554559062603, 0.045463685359156215, -0.047739565747091685, -0.12888600719361, -0.09124219383378568, 0.061882089918826946, -0.004127322825663318, 0.07581511870860355, -0.13108572174270092, -0.0007181900744880813, -0.07646211792181082, -0.1162351268577077, -0.1721241957967495, -0.1263244141021382, 0.07787859063977838, -0.037335840175249005, 0.04785717726118798, 0.007841018306422377, -0.08091434545005044, 0.07018470191763737, -0.15669839753551956, 0.03931478995745073, 0.019097395533430844, -0.015583843571353851], [-0.053877362004476986, 0.0034678249034037685, -0.07912666726966139, -0.22165022941789825, 0.03274743904332885, -0.03024323204993176, 0.0823808332870516, -0.05797749585793345, -0.008534199675426724, 0.062331872610351495, 0.05049396822714676, -0.017217426077190064, 0.022211031982022858, 0.10125807908252901, 0.06789686197666368, 0.17323367341857598, -0.05501541856014056, 0.1361490555730444, -0.005465015520127172, 0.17649176589598317, 0.015949453772331406, 0.04008043051861535, -0.03308674783849271, -5.059925517735317e-05], [0.11356314455514185, 0.007929057083359626, 0.13122789026662662, -0.04725431001627883, 0.14663872328401445, 0.007361394684650902, 0.03958488704790085, -0.08246940174272172, 0.003071306562764496, -0.025168391718150187, 0.035138474789794844, 0.030103147480173977, 0.03391522922100122, -0.2224833573371353, -0.07299893478410632, -0.056011833819251955, -0.019590832268585438, 0.17503389522624935, -0.020267519863364128, -0.09499558463614549, -0.035285213749591135, 0.025706628035194003, -0.06576634318833587, -0.014904920294754972]], [[0.07617895125164979, -0.04378038918329282, -0.23806099453200155, -0.07420297793940947, -0.17782595571636778, 0.08282437355877514, 0.07245367173604986], [-0.012361765260819849, -0.11737350544726682, 0.046032293463227715, -0.08510887731940059, 0.0695721038064391, -0.1032231614668996, -0.020267906420835043], [0.03204594371690337, 0.15417852802249649, -0.10378542218881824, -0.05776302808970155, -0.019149648886648298, 0.011643569408864962, 0.0131459914820393]], [[-0.06593203240702927, -0.008692738282779673, -0.08484969463116698], [-0.0043744620191674055, -0.039612328579053134, -0.0837543026890923], [0.0866486630208803, 0.03381551340085405, 0.13963765811048215], [0.1558802457496707, -0.16403741238825126, 0.00776886706588629], [0.061889745468349314, -0.21822084259581953, -0.1217377561279393], [-0.2634247457843719, -0.05573688804299068, 0.10535411371885356], [0.17993090620194177, 0.16209530080762197, 0.08038219574740364], [0.04328052078446261, -0.018983853407080732, 0.231262463937762], [-0.0628427597415454, -0.21827084928665602, -0.04949427975707664], [-0.0052164050845270316, -0.11999310012175109, 0.016929717535258723]]], 'biases': [[[-8.774404483538611e-05], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[-0.49994260244778105], [0.0], [0.0]], [[-0.16848818141134564], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]]}, {'id': None, 'layers': [24, 7, 3, 10], 'weights': [[[0.12916994654285172, -0.056045160812946276, 0.058723613579585644, 0.04856568908293214, 0.01598722610938355, 0.038011611616561115, 0.0005391668134509634, -0.07527501624862042, -0.028895269397912933, -0.07022907935941665, 0.088238794836276, 0.011586895715729274, -0.02872373480329678, -0.1164985886299898, 0.014268905756038924, 0.07987431331605976, 0.1731047971488533, 0.12903252187512615, -0.18169552985226356, 0.0069042506176051986, -0.002532034462847572, -0.05628062976374956, -0.035284564574092264, 0.01802364750920126], [0.037053350486615275, 0.04994888474299755, 0.07363869031013565, -0.04779052885961933, -0.12737602918463972, 0.10277482549037005, -0.05672846097037825, -0.01933779600665711, -0.03293853910377252, -0.03304274688000921, -0.07642986722343234, -0.049590588158823036, -0.09492935879223781, -0.005016418836272716, -0.04675544869341193, 0.11634903033242823, 0.06275380448804724, 0.00428002042707791, -0.009564101899201989, 0.10397533264566586, -0.20273857968106107, -0.13495728713859065, -0.09421335907579911, -0.021008509155174312], [0.05263968475307579, -0.06923487614736579, 0.010651319957397702, -0.04869810544493017, -0.052725752726882895, -0.023688776963159335, -0.04733223178245963, -0.12583334740453128, 0.04659509760902396, 0.14797620613790446, 0.11093173636480046, -0.08682392513969568, -0.1329263532958079, -0.03870252145274489, -0.11256146966605823, 0.007197842733865516, -0.06388541404039579, 0.1218051382114746, 0.013997989654967687, -0.03628845832621168, -0.1844694671368765, 0.013897826337723636, -0.08824931823043497, 0.02471395576435801], [-0.11725536072078152, -0.11888837857647175, -0.06489925210201951, 0.06587482426138863, 0.02512485715884971, 0.059306302988137986, 0.10546232048000384, 0.10128009262442106, -0.012422157091417307, 0.1514832933250595, -0.09671080448080671, 0.02855503335839965, -0.03386330705609799, 0.049607013566915326, 0.08452693191374809, -0.04165670209857107, -0.11651196581312953, -0.14055785408090146, 0.16063650080760625, 0.04465279415961853, 0.025497696171923476, 0.10236829594748297, -0.16416191176521047, 0.02398431483543019], [-0.057549012332810484, 0.020496177675943066, 0.06863326099548436, -0.2241965160148689, 0.1326164560023668, -0.26213364060645, 0.01816595846908859, 0.04860448409388804, -0.05694601194232693, 0.07385750061046216, 0.05919441455300008, -0.10948625610276726, 0.05453731194945443, 0.12019599735919427, -0.01363509180225395, -0.04581562505561853, 0.12345209290426112, -0.008849266761181118, 0.10560807452001025, -0.08106924431308049, 0.06263074652963477, 0.007130984685526223, -0.21187250605183225, -0.06184064650171962], [0.01157435757427029, -0.026447353717361198, -0.06727553929214962, -0.08069037362713694, 0.11955683111210956, -0.04406799537252846, -0.07440813116658272, -0.10617071380646848, 0.04990708646124639, 0.004803570730245153, -0.0640157976722149, 0.12849331883012893, -0.09488097513914898, -0.0677348662263037, 0.14916552262368546, -0.08142908582059155, -0.024122404105822018, -0.13859712839792654, -0.19884691200202909, 0.03272267992657487, -0.05725254756789553, 0.0710519876654046, -0.19086113826917928, 0.10921715324288342], [0.013535643283585414, 0.18680228503937904, -0.3343039110445643, -0.06214005893624902, 0.09322631623713809, 0.01333830314047582, -0.27435261184761056, -0.05190029997648337, -0.05690931566927278, 0.1290056054134879, -0.09389979388743888, -0.10368514760005527, -0.030491681598285515, -0.0957932539079804, 0.03894847609112658, -0.12809410329298984, -0.0702144400486982, 0.038491238584316155, 0.17838262878315395, 0.055518980686496994, 0.09820448755062834, 0.22627065803938462, -0.02341303112995738, 0.1360138054341173]], [[-0.20216658402057913, -0.06615209285799717, -0.13905383709427172, -0.15435100028073181, 0.026353170500959172, -0.04097483914689676, 0.033099226182456115], [-0.025360947367646415, 0.019078089873782556, 0.04820928880887396, -0.08058909781261418, -0.009066621431643537, -0.10431469810763107, 0.14546714664182686], [0.14897212500704732, 0.2528750442187421, -0.16268272231015432, -0.0410069903135685, 0.045902341035323944, -0.018940940357256353, 0.017325563870478483]], [[-0.07336158378869745, 0.09116288949873762, 0.08489555078681302], [0.09617132161697722, 0.11370048277619627, -0.040759577190897796], [-0.1881299215165994, -0.12025557421705563, -0.039757532244646204], [-0.014428370466567877, -0.0493019933887061, -0.018575804436708143], [0.07845806033929978, -0.1612294831666849, 0.030067345814968855], [-0.061648495152554106, -0.06756391607873417, -0.09917749124760755], [-0.07257620518409151, 0.1017517555002068, 0.15651279191931464], [0.025302108446132694, 0.05713683504690114, 0.015796586010228465], [-0.050830215323670006, 0.08791710321277639, -0.19480340010394856], [-0.12470447668400797, 0.0978445949966762, -0.16984597155074938]]], 'biases': [[[0.3641973949985786], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], [[-0.24060356342427414], [0.0], [0.0]], [[0.0037734278974192598], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]]}], [{'energy': -0.007191575548586015, 'max_energy': 0.9341329880827718, 'movement_energy_cost': 0.009341329880827719, 'signal_emit_range': 0.5289898134244649, 'signal_emit_cost': 0.0037029286939712545, 'signal_hear_range': 0, 'idle_energy_cost': 0.01}, {'energy': -0.034670379047967465, 'max_energy': 1.083002364484935, 'movement_energy_cost': 0.010830023644849349, 'signal_emit_range': 0.7672540155161728, 'signal_emit_cost': 0.005370778108613209, 'signal_hear_range': 0.34482141451742476, 'idle_energy_cost': 0.04448214145174248}], 4173.0]

    for x in best_grid_0[0]:
        print(type(x))
    # pp(best_grid_0)
    
    for (brain_types, agentAttributes, fitness) in [best_grid_0, best_grid_1, best_grid_2]:
        print(fitness)
        for grid_image_path in ["./data/environments/1.png", "./data/environments/2.png", "./data/environments/0.png"]:
            brain_types = [MLPBrain.deserialize(brain_type) for brain_type in brain_types]
            agent_attributes = [AgentAttributes.deserialize(agent_attribute) for agent_attribute in agentAttributes]
            agents_per_brain_num = len(agent_attributes)


            evaluate_brains_agents(brain_types, agent_attributes, # type: ignore
                agents_per_brain_num=agents_per_brain_num,
                max_iterations=200,
                render_mode='human',
                grid_image_path=grid_image_path,
                seed=random.randint(0, 1000000),
            )
if __name__ == "__main__":
    main()